package cmlutils

import (
	"crypto/md5"
	"encoding/hex"
	"image"
	_ "image/jpeg"
	_ "image/png"
	"math/rand"
	"os"
	"regexp"
	"strings"
	"time"

	"github.com/nu7hatch/gouuid"
	"github.com/sirupsen/logrus"
)

func FileExtension(fileName string) string {
	if fileName != "" {
		splitStrings := strings.Split(fileName, ".")
		if len(splitStrings) > 1 {
			// is valid file
			return splitStrings[len(splitStrings)-1]
		}
	}

	return ""
}
func CallerIDVerification(number string) bool {
	match, err := regexp.MatchString("^\\+?\\d{10,11}(,\\+?\\d{10,11})*$", number)
	if err != nil {
		return false
	}
	return match
}
func RemoveExtension(fileName string) string {
	fileExtension := FileExtension(fileName)
	return strings.TrimSuffix(fileName, "."+fileExtension)
}

func GetAutoGeneratedCode() int64 {
	return time.Now().UTC().Unix()
}

func GetUUID() (string, error) {
	id, err := uuid.NewV4()
	if err != nil {
		return "", err
	}
	//value := *id
	uuid := id.String()
	return uuid, nil
}

func DeleteFile(path string) {
	// delete file
	var err = os.Remove(path)
	if isError(err) {
		return
	}

	logrus.Debugln(" ==> done deleting file")
}

func isError(err error) bool {
	if err != nil {
		logrus.Errorln(err.Error())
	}

	return err != nil
}

func GetMD5Hash(text string) string {
	hasher := md5.New()
	hasher.Write([]byte(text))
	return hex.EncodeToString(hasher.Sum(nil))
}

func SliceIndex(limit int, predicate func(i int) bool) int {
	for i := 0; i < limit; i++ {
		if predicate(i) {
			return i
		}
	}
	return -1
}

func IsUSNumber(number string) bool {
	match, err := regexp.MatchString("^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?|(anonymous)$", number)
	if err != nil {
		return false
	}
	return match
}

func SimplifyPhoneNumber(source string) string {
	newString := strings.Replace(source, " ", "", -1)    // eliminate spaces
	newString = strings.Replace(newString, "-", "", -1)  // eliminate dashes
	newString = strings.Replace(newString, "(", "", -1)  // eliminate brackets
	newString = strings.Replace(newString, ")", "", -1)  // eliminate brackets
	newString = strings.Replace(newString, "\t", "", -1) // eliminate brackets

	return newString
}

func ExtractNumberFromUSNumber(number string) string {
	sNumber := SimplifyPhoneNumber(number)

	// here extract last 10 digits from the number
	last10 := number[len(sNumber)-10:]
	return last10
}

func IsPhoneKey(key string) bool {
	match, err := regexp.MatchString("^(\\d|\\*|\\#)$", key)
	if err != nil {
		return false
	}

	return match
}

func EpochMilli() int64 {
	now := time.Now().UTC()
	nanos := now.UnixNano()
	millis := nanos / 1000000

	return millis
}

func RandomString(l int) string {
	bytes := make([]byte, l)
	for i := 0; i < l; i++ {
		bytes[i] = byte(RandInt(65, 90))
	}
	return string(bytes)
}

func RandInt(min int32, max int32) int32 {
	if min >= max {
		return 0
	}
	return min + rand.Int31n(max-min)
}

func RemoveNonAlphaNumeric(source string) (string, error) {
	// Make a Regex to say we only want
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		return "", err
	}
	processedString := reg.ReplaceAllString(source, "_")
	return processedString, nil
}

func GetImageDimension(imagePath string) (int, int, error) {
	file, err := os.Open(imagePath)
	if err != nil {
		return 0, 0, err
	}

	defer file.Close()

	image, str, err := image.DecodeConfig(file)
	if err != nil {
		logrus.Infoln("String : ", str)
		return 0, 0, err
	}
	return image.Width, image.Height, nil
}
